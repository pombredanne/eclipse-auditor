/**
 *	Copyright (c) 2015 Vör Security Inc.
 *	All rights reserved.
 *	
 *	Redistribution and use in source and binary forms, with or without
 *	modification, are permitted provided that the following conditions are met:
 *	    * Redistributions of source code must retain the above copyright
 *	      notice, this list of conditions and the following disclaimer.
 *	    * Redistributions in binary form must reproduce the above copyright
 *	      notice, this list of conditions and the following disclaimer in the
 *	      documentation and/or other materials provided with the distribution.
 *	    * Neither the name of the <organization> nor the
 *	      names of its contributors may be used to endorse or promote products
 *	      derived from this software without specific prior written permission.
 *	
 *	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *	DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
 *	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 *	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package net.ossindex.eclipse.properties;

import net.ossindex.common.resource.FileResource;
import net.ossindex.eclipse.OssIndexConnectionException;
import net.ossindex.eclipse.OssIndexResourceManager;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.QualifiedName;
import org.eclipse.jface.preference.PreferencePage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.dialogs.PropertyPage;

/** Properties page for OSS Index FileResource
 * 
 * Originally generated by Eclipse.
 * 
 * @author Ken Duck
 *
 */
public class OssIndexPropertyPage extends PropertyPage
{
	private static final String PATH_TITLE = "Path:";
	private static final String OWNER_TITLE = "&Owner:";
	private static final String OWNER_PROPERTY = "OWNER";
	private static final String DEFAULT_OWNER = "John Doe";

	/**
	 * An unknown resource was selected
	 */
	private static final String UNKNOWN_RESOURCE = "This file or resource is unknown to OSS Index at this time.";

	/**
	 * There was a connection error with OSS Index
	 */
	private static final String CONNECTION_ERROR = "Connection error: ";

	private static final int TEXT_FIELD_WIDTH = 50;

	private Text ownerText;

	/**
	 * Constructor for SamplePropertyPage.
	 */
	public OssIndexPropertyPage()
	{
		super();
	}

	private void addFirstSection(Composite parent, IFile file)
	{
		Composite composite = createDefaultComposite(parent);

		//Label for path field
		Label pathLabel = new Label(composite, SWT.NONE);
		pathLabel.setText(PATH_TITLE);

		// Path text field
		Text pathValueText = new Text(composite, SWT.WRAP | SWT.READ_ONLY);
		pathValueText.setText(file.getFullPath().toString());
	}

//	private void addSeparator(Composite parent)
//	{
//		Label separator = new Label(parent, SWT.SEPARATOR | SWT.HORIZONTAL);
//		GridData gridData = new GridData();
//		gridData.horizontalAlignment = GridData.FILL;
//		gridData.grabExcessHorizontalSpace = true;
//		separator.setLayoutData(gridData);
//	}
//
//	private void addSecondSection(Composite parent)
//	{
//		Composite composite = createDefaultComposite(parent);
//
//		// Label for owner field
//		Label ownerLabel = new Label(composite, SWT.NONE);
//		ownerLabel.setText(OWNER_TITLE);
//
//		// Owner text field
//		ownerText = new Text(composite, SWT.SINGLE | SWT.BORDER);
//		GridData gd = new GridData();
//		gd.widthHint = convertWidthInCharsToPixels(TEXT_FIELD_WIDTH);
//		ownerText.setLayoutData(gd);
//
//		// Populate owner text field
//		try
//		{
//			String owner =
//					((IResource) getElement()).getPersistentProperty(
//							new QualifiedName("", OWNER_PROPERTY));
//			ownerText.setText((owner != null) ? owner : DEFAULT_OWNER);
//		}
//		catch (CoreException e)
//		{
//			ownerText.setText(DEFAULT_OWNER);
//		}
//	}

	/** This file or resource is not known to OSS Index
	 * 
	 * @param parent
	 * @param msg 
	 */
	private void addMessageSection(Composite parent, String msg)
	{
		Composite composite = createDefaultComposite(parent);

		//Label for path field
		Label pathLabel = new Label(composite, SWT.NONE);
		pathLabel.setText(msg);
	}

	/**
	 * @see PreferencePage#createContents(Composite)
	 */
	protected Control createContents(Composite parent)
	{
		Composite composite = new Composite(parent, SWT.NONE);
		GridLayout layout = new GridLayout();
		composite.setLayout(layout);
		GridData data = new GridData(GridData.FILL);
		data.grabExcessHorizontalSpace = true;
		composite.setLayoutData(data);

		Object o = getElement();
		IResource resource = null;
		if (o instanceof IResource)
		{
			resource = (IResource)o;
		}
		else if(o instanceof IAdaptable)
		{
			IAdaptable a = (IAdaptable)o;
			resource = (IResource)a.getAdapter(IResource.class);
		}
		if(resource instanceof IFile)
		{
			try
			{
				FileResource ossResource = OssIndexResourceManager.getInstance().getFileResource((IFile)resource);
				if(ossResource != null && ossResource.exists())
				{
					addFirstSection(composite, (IFile) resource);
//					addSeparator(composite);
//					addSecondSection(composite);
				}
				else
				{
					addMessageSection(composite, UNKNOWN_RESOURCE);
				}
			}
			catch (OssIndexConnectionException e)
			{
				addMessageSection(composite, CONNECTION_ERROR + "\n\n" + e.getMessage());
			}

		}
		else
		{
			addMessageSection(composite, UNKNOWN_RESOURCE);
		}
		return composite;
	}

	private Composite createDefaultComposite(Composite parent)
	{
		Composite composite = new Composite(parent, SWT.NULL);
		GridLayout layout = new GridLayout();
		layout.numColumns = 2;
		composite.setLayout(layout);

		GridData data = new GridData();
		data.verticalAlignment = GridData.FILL;
		data.horizontalAlignment = GridData.FILL;
		composite.setLayoutData(data);

		return composite;
	}

	protected void performDefaults()
	{
		//		super.performDefaults();
		//		// Populate the owner text field with the default value
		//		ownerText.setText(DEFAULT_OWNER);
	}

	public boolean performOk()
	{
		//		// store the value in the owner text field
		//		try
		//		{
		//			((IResource) getElement()).setPersistentProperty(
		//				new QualifiedName("", OWNER_PROPERTY),
		//				ownerText.getText());
		//		}
		//		catch (CoreException e)
		//		{
		//			return false;
		//		}
		return true;
	}

}