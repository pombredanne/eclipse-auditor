/**
 *	Copyright (c) 2015 Vör Security Inc.
 *	All rights reserved.
 *	
 *	Redistribution and use in source and binary forms, with or without
 *	modification, are permitted provided that the following conditions are met:
 *	    * Redistributions of source code must retain the above copyright
 *	      notice, this list of conditions and the following disclaimer.
 *	    * Redistributions in binary form must reproduce the above copyright
 *	      notice, this list of conditions and the following disclaimer in the
 *	      documentation and/or other materials provided with the distribution.
 *	    * Neither the name of the <organization> nor the
 *	      names of its contributors may be used to endorse or promote products
 *	      derived from this software without specific prior written permission.
 *	
 *	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *	DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
 *	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 *	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package net.ossindex.eclipse.views;


import java.net.URI;
import java.net.URISyntaxException;

import net.ossindex.eclipse.builder.DependencyBuilderVisiter;

import org.eclipse.core.resources.IMarker;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.ITreeSelection;
import org.eclipse.swt.SWT;
import org.eclipse.swt.SWTError;
import org.eclipse.swt.browser.Browser;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.ui.ISelectionListener;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.part.ViewPart;


public class VulnerabilityView extends ViewPart
{

	/**
	 * The ID of the view as specified by the extension.
	 */
	public static final String ID = "net.ossindex.eclipse.views.VulnerabilityView";

	protected static final String VULNERABILITY_MARKER = "net.ossindex.eclipse.marker.VulnerabilityMarker";

	private Browser browser;

	/**
	 * The constructor.
	 */
	public VulnerabilityView() {
	}

	/**
	 * This is a callback that will allow us
	 * to create the viewer and initialize it.
	 */
	public void createPartControl(Composite parent)
	{
		try
		{
			browser = new Browser(parent, SWT.NONE);
		}
		catch (SWTError e)
		{
			Label label = new Label(parent, SWT.NONE);
			label.setText("Browser cannot be initialized.");
		}

		getSite().getWorkbenchWindow().getSelectionService().addSelectionListener(new ISelectionListener()
		{

			/*
			 * (non-Javadoc)
			 * @see org.eclipse.ui.ISelectionListener#selectionChanged(org.eclipse.ui.IWorkbenchPart, org.eclipse.jface.viewers.ISelection)
			 */
			@Override
			public void selectionChanged(IWorkbenchPart part, ISelection selection)
			{
				if(selection instanceof ITreeSelection)
				{
					ITreeSelection s = (ITreeSelection)selection;
					Object obj = s.getFirstElement();
					if(obj != null)
					{
						System.err.println("SELECTION: " + obj.getClass().getSimpleName());
						if (obj instanceof IAdaptable)
						{
							IAdaptable adaptable = (IAdaptable)obj;

							IMarker marker = (IMarker)adaptable.getAdapter(IMarker.class);
							if(marker != null)
							{
								try
								{
									if(VULNERABILITY_MARKER.equals(marker.getType()))
									{
										selectVulnerabilityMarker(marker);
									}
								}
								catch (CoreException e)
								{
									e.printStackTrace();
								}
							}
						}
					}
				}
			}
		});

	}
	
	/**
	 * 
	 * @param marker
	 * @throws CoreException
	 */
	private void selectVulnerabilityMarker(IMarker marker) throws CoreException
	{
		String url = marker.getAttribute(DependencyBuilderVisiter.DEPENDENCY_URL, null);
		try
		{
			URI uri = new URI(url);
			String scheme = uri.getScheme();
			if("http".equals(scheme) || "https".equals(scheme)) {
				browser.setUrl(url);
			}
			else if("cve".equals(scheme)) {
				String id = marker.getAttribute(DependencyBuilderVisiter.VULNERABILITY_ID, null);
				if(id != null)
				{
					String cveId = uri.getPath();
					while(cveId.startsWith("/")) cveId = cveId.substring(1);
					System.err.println("  MARKER: " + id + " " + cveId);
					url = "https://ossindex.net/resource/cve/" + id;
					browser.setUrl(url);
				}
			}
		}
		catch (URISyntaxException e)
		{
			e.printStackTrace();
		}
	}

	//
	//	private void hookContextMenu() {
	//		MenuManager menuMgr = new MenuManager("#PopupMenu");
	//		menuMgr.setRemoveAllWhenShown(true);
	//		menuMgr.addMenuListener(new IMenuListener() {
	//			public void menuAboutToShow(IMenuManager manager) {
	//				VulnerabilityView.this.fillContextMenu(manager);
	//			}
	//		});
	//		Menu menu = menuMgr.createContextMenu(viewer.getControl());
	//		viewer.getControl().setMenu(menu);
	//		getSite().registerContextMenu(menuMgr, viewer);
	//	}
	//
	//	private void contributeToActionBars() {
	//		IActionBars bars = getViewSite().getActionBars();
	//		fillLocalPullDown(bars.getMenuManager());
	//		fillLocalToolBar(bars.getToolBarManager());
	//	}
	//
	//	private void fillLocalPullDown(IMenuManager manager) {
	//		manager.add(action1);
	//		manager.add(new Separator());
	//		manager.add(action2);
	//	}
	//
	//	private void fillContextMenu(IMenuManager manager) {
	//		manager.add(action1);
	//		manager.add(action2);
	//		// Other plug-ins can contribute there actions here
	//		manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
	//	}
	//
	//	private void fillLocalToolBar(IToolBarManager manager) {
	//		manager.add(action1);
	//		manager.add(action2);
	//	}
	//
	//	private void makeActions() {
	//		action1 = new Action() {
	//			public void run() {
	//				showMessage("Action 1 executed");
	//			}
	//		};
	//		action1.setText("Action 1");
	//		action1.setToolTipText("Action 1 tooltip");
	//		action1.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().
	//				getImageDescriptor(ISharedImages.IMG_OBJS_INFO_TSK));
	//
	//		action2 = new Action() {
	//			public void run() {
	//				showMessage("Action 2 executed");
	//			}
	//		};
	//		action2.setText("Action 2");
	//		action2.setToolTipText("Action 2 tooltip");
	//		action2.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().
	//				getImageDescriptor(ISharedImages.IMG_OBJS_INFO_TSK));
	//		doubleClickAction = new Action() {
	//			public void run() {
	//				ISelection selection = viewer.getSelection();
	//				Object obj = ((IStructuredSelection)selection).getFirstElement();
	//				showMessage("Double-click detected on "+obj.toString());
	//			}
	//		};
	//	}
	//
	//	private void hookDoubleClickAction() {
	//		viewer.addDoubleClickListener(new IDoubleClickListener() {
	//			public void doubleClick(DoubleClickEvent event) {
	//				doubleClickAction.run();
	//			}
	//		});
	//	}
	//	private void showMessage(String message) {
	//		MessageDialog.openInformation(
	//				viewer.getControl().getShell(),
	//				"Vulnerabilities",
	//				message);
	//	}

	/**
	 * Passing the focus request to the viewer's control.
	 */
	public void setFocus() {
	}
}