/**
 *	Copyright (c) 2015 Vör Security Inc.
 *	All rights reserved.
 *	
 *	Redistribution and use in source and binary forms, with or without
 *	modification, are permitted provided that the following conditions are met:
 *	    * Redistributions of source code must retain the above copyright
 *	      notice, this list of conditions and the following disclaimer.
 *	    * Redistributions in binary form must reproduce the above copyright
 *	      notice, this list of conditions and the following disclaimer in the
 *	      documentation and/or other materials provided with the distribution.
 *	    * Neither the name of the <organization> nor the
 *	      names of its contributors may be used to endorse or promote products
 *	      derived from this software without specific prior written permission.
 *	
 *	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *	DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
 *	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 *	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package net.ossindex.eclipse.views;


import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;

import net.ossindex.eclipse.Activator;
import net.ossindex.eclipse.builder.DependencyBuilderVisiter;

import org.eclipse.core.resources.IMarker;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.action.IToolBarManager;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.resource.ImageRegistry;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.ITreeSelection;
import org.eclipse.swt.SWT;
import org.eclipse.swt.SWTError;
import org.eclipse.swt.browser.Browser;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.ui.IActionBars;
import org.eclipse.ui.ISelectionListener;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.part.ViewPart;


public class VulnerabilityView extends ViewPart
{

	/**
	 * The ID of the view as specified by the extension.
	 */
	public static final String ID = "net.ossindex.eclipse.views.VulnerabilityView";

	protected static final String VULNERABILITY_MARKER = "net.ossindex.eclipse.marker.VulnerabilityMarker";
	private static final String DETAILS_KEY = "details";

	private Browser browser;

	/**
	 * Track the current marker so we can switch views quickly
	 */
	private IMarker currentMarker;

	/**
	 * 
	 */
	protected boolean details = false;

	private Action detailsAction;

	/**
	 * The constructor.
	 */
	public VulnerabilityView()
	{
		loadImagesIntoRegistry();
	}

	private void loadImagesIntoRegistry()
	{
		final ImageRegistry imgReg = Activator.getDefault().getImageRegistry();
		if (imgReg.get(DETAILS_KEY) == null)
		{
			final URL url = this.getClass().getResource("/icons/application_view_detail.png");
			imgReg.put(DETAILS_KEY, ImageDescriptor.createFromURL(url));
		}
	}
	/**
	 * This is a callback that will allow us
	 * to create the viewer and initialize it.
	 */
	public void createPartControl(Composite parent)
	{
		Composite composite = new Composite(parent, SWT.NONE);
		GridLayout layout = new GridLayout();
		layout.numColumns = 1;
		composite.setLayout(layout);
		try
		{
			browser = new Browser(composite, SWT.NONE);
			GridData data = new GridData();
			data.grabExcessHorizontalSpace = true;
			data.grabExcessVerticalSpace = true;
			data.horizontalAlignment = SWT.FILL;
			data.verticalAlignment = SWT.FILL;
			browser.setLayoutData(data);
		}
		catch (SWTError e)
		{
			Label label = new Label(composite, SWT.NONE);
			label.setText("Browser cannot be initialized.");
		}

		getSite().getWorkbenchWindow().getSelectionService().addSelectionListener(new ISelectionListener()
		{

			/*
			 * (non-Javadoc)
			 * @see org.eclipse.ui.ISelectionListener#selectionChanged(org.eclipse.ui.IWorkbenchPart, org.eclipse.jface.viewers.ISelection)
			 */
			@Override
			public void selectionChanged(IWorkbenchPart part, ISelection selection)
			{
				if(selection instanceof ITreeSelection)
				{
					ITreeSelection s = (ITreeSelection)selection;
					Object obj = s.getFirstElement();
					if(obj != null)
					{
						System.err.println("SELECTION: " + obj.getClass().getSimpleName());
						if (obj instanceof IAdaptable)
						{
							IAdaptable adaptable = (IAdaptable)obj;

							IMarker marker = (IMarker)adaptable.getAdapter(IMarker.class);
							currentMarker = marker;
							if(marker != null)
							{
								try
								{
									if(VULNERABILITY_MARKER.equals(marker.getType()))
									{
										selectVulnerabilityMarker(marker);
									}
								}
								catch (CoreException e)
								{
									e.printStackTrace();
								}
							}
						}
					}
				}
			}
		});

		makeActions();
		contributeToActionBars();
	}

	/**
	 * 
	 */
	private void contributeToActionBars()
	{
		IActionBars bars = getViewSite().getActionBars();
		fillLocalToolBar(bars.getToolBarManager());
	}

	/**
	 * 
	 * @param manager
	 */
	private void fillLocalToolBar(IToolBarManager manager)
	{
		manager.add(detailsAction);
	}


	/**
	 * 
	 */
	private void makeActions()
	{
		final ImageRegistry imgReg = Activator.getDefault().getImageRegistry();
		// Export Action
		detailsAction = new Action("Vulnerability Details", IAction.AS_CHECK_BOX)
		{
			public void run()
			{
				details  = !details;
				if(details)
				{
					detailsAction.setToolTipText("Hide details");
				}
				else
				{
					detailsAction.setToolTipText("Show details");
				}

				if(currentMarker != null)
				{
					try
					{
						selectVulnerabilityMarker(currentMarker);
					}
					catch (CoreException e)
					{
						e.printStackTrace();
					}
				}
			}
		};
		detailsAction.setText("Details");
		detailsAction.setToolTipText("Show details");
		detailsAction.setImageDescriptor(imgReg.getDescriptor(DETAILS_KEY));
	}

	/**
	 * 
	 * @param marker
	 * @throws CoreException
	 */
	private void selectVulnerabilityMarker(IMarker marker) throws CoreException
	{
		if(details)
		{
			try
			{
				browser.setUrl(getDetailUrl(marker));
				return;
			}
			catch (URISyntaxException e)
			{
				e.printStackTrace();
			}
		}

		// If we do not get details, get the summary text
		browser.setText(getSummaryText(marker));
	}

	//
	//	private void hookContextMenu() {
	//		MenuManager menuMgr = new MenuManager("#PopupMenu");
	//		menuMgr.setRemoveAllWhenShown(true);
	//		menuMgr.addMenuListener(new IMenuListener() {
	//			public void menuAboutToShow(IMenuManager manager) {
	//				VulnerabilityView.this.fillContextMenu(manager);
	//			}
	//		});
	//		Menu menu = menuMgr.createContextMenu(viewer.getControl());
	//		viewer.getControl().setMenu(menu);
	//		getSite().registerContextMenu(menuMgr, viewer);
	//	}
	//
	//	private void contributeToActionBars() {
	//		IActionBars bars = getViewSite().getActionBars();
	//		fillLocalPullDown(bars.getMenuManager());
	//		fillLocalToolBar(bars.getToolBarManager());
	//	}
	//
	//	private void fillLocalPullDown(IMenuManager manager) {
	//		manager.add(action1);
	//		manager.add(new Separator());
	//		manager.add(action2);
	//	}
	//
	//	private void fillContextMenu(IMenuManager manager) {
	//		manager.add(action1);
	//		manager.add(action2);
	//		// Other plug-ins can contribute there actions here
	//		manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
	//	}
	//
	//	private void fillLocalToolBar(IToolBarManager manager) {
	//		manager.add(action1);
	//		manager.add(action2);
	//	}
	//
	//	private void makeActions() {
	//		action1 = new Action() {
	//			public void run() {
	//				showMessage("Action 1 executed");
	//			}
	//		};
	//		action1.setText("Action 1");
	//		action1.setToolTipText("Action 1 tooltip");
	//		action1.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().
	//				getImageDescriptor(ISharedImages.IMG_OBJS_INFO_TSK));
	//
	//		action2 = new Action() {
	//			public void run() {
	//				showMessage("Action 2 executed");
	//			}
	//		};
	//		action2.setText("Action 2");
	//		action2.setToolTipText("Action 2 tooltip");
	//		action2.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().
	//				getImageDescriptor(ISharedImages.IMG_OBJS_INFO_TSK));
	//		doubleClickAction = new Action() {
	//			public void run() {
	//				ISelection selection = viewer.getSelection();
	//				Object obj = ((IStructuredSelection)selection).getFirstElement();
	//				showMessage("Double-click detected on "+obj.toString());
	//			}
	//		};
	//	}
	//
	//	private void hookDoubleClickAction() {
	//		viewer.addDoubleClickListener(new IDoubleClickListener() {
	//			public void doubleClick(DoubleClickEvent event) {
	//				doubleClickAction.run();
	//			}
	//		});
	//	}
	//	private void showMessage(String message) {
	//		MessageDialog.openInformation(
	//				viewer.getControl().getShell(),
	//				"Vulnerabilities",
	//				message);
	//	}

	private String getDetailUrl(IMarker marker) throws URISyntaxException
	{
		String url = marker.getAttribute(DependencyBuilderVisiter.DEPENDENCY_URL, null);
		URI uri = new URI(url);
		String scheme = uri.getScheme();
		String id = marker.getAttribute(DependencyBuilderVisiter.VULNERABILITY_ID, null);
		if("cve".equals(scheme))
		{
			if(id != null)
			{
				String cveId = uri.getPath();
				while(cveId.startsWith("/")) cveId = cveId.substring(1);
				System.err.println("  MARKER: " + id + " " + cveId);
				url = "https://ossindex.net/resource/cve/" + id;
			}
		}
		else if("http".equals(scheme) || "https".equals(scheme))
		{
			url = "https://ossindex.net/resource/vulnerability/" + id;
		}

		return url;
	}

	private String getSummaryText(IMarker marker) throws CoreException
	{
		IResource resource = marker.getResource();
		String title = (String)marker.getAttribute(IMarker.MESSAGE);
		String summary = (String)marker.getAttribute(DependencyBuilderVisiter.VULNERABILITY_SUMMARY);
		String url = marker.getAttribute(DependencyBuilderVisiter.DEPENDENCY_URL, null);
		String id = marker.getAttribute(DependencyBuilderVisiter.VULNERABILITY_ID, null);

		StringBuilder sb = new StringBuilder();
		sb.append("<div style='font-size: 1.0em; font-weight: bold; margin-bottom: 0.5em; left: 0px; right 0px; background-color: lightgrey; padding: 0.25em; border-style: solid; border-width: 1px; border-color: grey;'>").append(resource.getName()).append("</div>");
		sb.append("<div style='font-size: 1.0em; margin-bottom: 0.5em;'>").append(title).append("</div>");
		sb.append("<div style='font-size: 0.9em; margin-bottom: 0.5em;'>").append(summary).append("</div>");
		sb.append("<h5>").append(url).append("</h5>");
		return sb.toString();
	}

	/**
	 * Passing the focus request to the viewer's control.
	 */
	public void setFocus() {
	}
}